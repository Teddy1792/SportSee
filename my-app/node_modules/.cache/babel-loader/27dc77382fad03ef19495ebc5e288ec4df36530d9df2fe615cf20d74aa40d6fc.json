{"ast":null,"code":"import { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../file/data.js';\n\n//function to get the user's name\nexport const getUserFirstNameById = id => {\n  const user = USER_MAIN_DATA.find(user => user.id === id);\n  return user ? user.userInfos.firstName : 'User not found';\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    console.log(USER_MAIN_DATA.find(user => user.id === id));\n    return USER_MAIN_DATA.find(user => user.id === id);\n  } else {\n    // Fetch data from API\n    try {\n      const response = await fetch(`https://api.example.com/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = userId => {\n  return USER_ACTIVITY.find(activity => activity.userId === userId);\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = userId => {\n  const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n  return userAverageSession ? userAverageSession.sessions : null;\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = userId => {\n  return USER_PERFORMANCE.find(performance => performance.userId === userId);\n};\n\n//checker les variables d'environement pour chaque fonction pour pouvoir récupérer soit l'API soit les données mockées\n// + créer une class de modélisation pour l'API (une classe pour chaque donnée)\n//formatage de données à faire directement dans la classe de modélisatione et non dans les composants !\n\n//fichier.env\n\n//ne pas oublier de basculer la récupération des datas en mockées en promesse (comme ça je n'aurai pas à tout changer)","map":{"version":3,"names":["USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","getUserFirstNameById","id","user","find","userInfos","firstName","getUserMainDataById","process","env","REACT_APP_USE_MOCKED_DATA","console","log","response","fetch","ok","Error","statusText","data","json","error","getUserActivityById","userId","activity","getUserAverageSessionsById","userAverageSession","session","sessions","getUserPerformanceById","performance"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import {\n    USER_MAIN_DATA,\n    USER_ACTIVITY,\n    USER_AVERAGE_SESSIONS,\n    USER_PERFORMANCE,\n  } from '../file/data.js'\n\n  //function to get the user's name\n  export const getUserFirstNameById = (id) => {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? user.userInfos.firstName : 'User not found';\n  };\n\n  // Function to get the main data by user ID\n  export const getUserMainDataById = async (id) => {\n    if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n      // Use mocked data\n      console.log(USER_MAIN_DATA.find(user => user.id === id));\n      return USER_MAIN_DATA.find(user => user.id === id);\n    } else {\n      // Fetch data from API\n      try {\n        const response = await fetch(`https://api.example.com/user/${id}`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok' + response.statusText);\n        }\n        const data = await response.json();\n        return data;\n      } catch (error) {\n        console.error('Fetch error: ', error);\n        throw error;\n      }\n    }\n  };\n  \n  // Function to get the activity data by user ID\n  export const getUserActivityById = (userId) => {\n    return USER_ACTIVITY.find(activity => activity.userId === userId);\n  };\n  \n  // Function to get the average session data by user ID\nexport const getUserAverageSessionsById = (userId) => {\n  const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n  return userAverageSession ? userAverageSession.sessions : null;\n};\n\n\n  // Function to get the performance data by user ID\n  export const getUserPerformanceById = (userId) => {\n    return USER_PERFORMANCE.find(performance => performance.userId === userId);\n  };\n\n  //checker les variables d'environement pour chaque fonction pour pouvoir récupérer soit l'API soit les données mockées\n  // + créer une class de modélisation pour l'API (une classe pour chaque donnée)\n  //formatage de données à faire directement dans la classe de modélisatione et non dans les composants !\n\n//fichier.env\n\n//ne pas oublier de basculer la récupération des datas en mockées en promesse (comme ça je n'aurai pas à tout changer)"],"mappings":"AAAA,SACIA,cAAc,EACdC,aAAa,EACbC,qBAAqB,EACrBC,gBAAgB,QACX,iBAAiB;;AAExB;AACA,OAAO,MAAMC,oBAAoB,GAAIC,EAAE,IAAK;EAC1C,MAAMC,IAAI,GAAGN,cAAc,CAACO,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKA,EAAE,CAAC;EACxD,OAAOC,IAAI,GAAGA,IAAI,CAACE,SAAS,CAACC,SAAS,GAAG,gBAAgB;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOL,EAAE,IAAK;EAC/C,IAAIM,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD;IACAC,OAAO,CAACC,GAAG,CAACf,cAAc,CAACO,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKA,EAAE,CAAC,CAAC;IACxD,OAAOL,cAAc,CAACO,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKA,EAAE,CAAC;EACpD,CAAC,MAAM;IACL;IACA,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BZ,EAAG,EAAC,CAAC;MAClE,IAAI,CAACW,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGH,QAAQ,CAACI,UAAU,CAAC;MACtE;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAIC,MAAM,IAAK;EAC7C,OAAOxB,aAAa,CAACM,IAAI,CAACmB,QAAQ,IAAIA,QAAQ,CAACD,MAAM,KAAKA,MAAM,CAAC;AACnE,CAAC;;AAED;AACF,OAAO,MAAME,0BAA0B,GAAIF,MAAM,IAAK;EACpD,MAAMG,kBAAkB,GAAG1B,qBAAqB,CAACK,IAAI,CAACsB,OAAO,IAAIA,OAAO,CAACJ,MAAM,KAAKA,MAAM,CAAC;EAC3F,OAAOG,kBAAkB,GAAGA,kBAAkB,CAACE,QAAQ,GAAG,IAAI;AAChE,CAAC;;AAGC;AACA,OAAO,MAAMC,sBAAsB,GAAIN,MAAM,IAAK;EAChD,OAAOtB,gBAAgB,CAACI,IAAI,CAACyB,WAAW,IAAIA,WAAW,CAACP,MAAM,KAAKA,MAAM,CAAC;AAC5E,CAAC;;AAED;AACA;AACA;;AAEF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}