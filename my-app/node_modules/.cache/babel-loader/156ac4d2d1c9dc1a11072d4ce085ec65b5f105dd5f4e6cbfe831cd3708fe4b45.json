{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getUserById, getUserActivityById, getUserAverageSessionsById, getUserPerformanceById } from './api'; // Adjust the import based on your file structure\n\n// Mock data imports\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from './mockData';\nconst useFetchingData = userId => {\n  _s();\n  const navigate = useNavigate();\n\n  // State for user data\n  const [user, setUser] = useState(null);\n  const [activity, setActivity] = useState(null);\n  const [averageSessions, setAverageSessions] = useState(null);\n  const [performance, setPerformance] = useState(null);\n\n  // Helper function to fetch data with error handling\n  const fetchData = async (fetchFunction, setData, dataKey) => {\n    try {\n      const result = await fetchFunction(userId);\n      setData(result);\n    } catch (error) {\n      console.error(error);\n      const mockData = {\n        USER_MAIN_DATA,\n        USER_ACTIVITY,\n        USER_AVERAGE_SESSIONS,\n        USER_PERFORMANCE\n      }[dataKey].find(data => data.userId === userId);\n      if (!mockData) {\n        navigate('/error');\n      } else {\n        setData({\n          data: mockData\n        });\n      }\n    }\n  };\n\n  // Effect for fetching user data\n  useEffect(() => {\n    fetchData(getUserById, setUser, 'USER_MAIN_DATA');\n  }, [userId]);\n\n  // Effect for fetching user activity\n  useEffect(() => {\n    fetchData(getUserActivityById, setActivity, 'USER_ACTIVITY');\n  }, [userId]);\n\n  // Effect for fetching user average sessions\n  useEffect(() => {\n    fetchData(getUserAverageSessionsById, setAverageSessions, 'USER_AVERAGE_SESSIONS');\n  }, [userId]);\n\n  // Effect for fetching user performance\n  useEffect(() => {\n    fetchData(getUserPerformanceById, setPerformance, 'USER_PERFORMANCE');\n  }, [userId]);\n\n  // Prepare the data to be returned for component usage\n  const userData = user === null || user === void 0 ? void 0 : user.data;\n  const activityData = activity === null || activity === void 0 ? void 0 : activity.data;\n  const averageSessionsData = averageSessions === null || averageSessions === void 0 ? void 0 : averageSessions.data;\n  const performanceData = performance === null || performance === void 0 ? void 0 : performance.data;\n  return {\n    userData,\n    activityData,\n    averageSessionsData,\n    performanceData\n  };\n};\n_s(useFetchingData, \"rqsu/vKDvIJiuZZPvUnbiDhzuX4=\", false, function () {\n  return [useNavigate];\n});\nexport default useFetchingData;","map":{"version":3,"names":["useState","useEffect","useNavigate","getUserById","getUserActivityById","getUserAverageSessionsById","getUserPerformanceById","USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","useFetchingData","userId","_s","navigate","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","fetchData","fetchFunction","setData","dataKey","result","error","console","mockData","find","data","userData","activityData","averageSessionsData","performanceData"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  getUserById,\n  getUserActivityById,\n  getUserAverageSessionsById,\n  getUserPerformanceById\n} from './api'; // Adjust the import based on your file structure\n\n// Mock data imports\nimport { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from './mockData';\n\nconst useFetchingData = (userId) => {\n  const navigate = useNavigate();\n\n  // State for user data\n  const [user, setUser] = useState(null);\n  const [activity, setActivity] = useState(null);\n  const [averageSessions, setAverageSessions] = useState(null);\n  const [performance, setPerformance] = useState(null);\n\n  // Helper function to fetch data with error handling\n  const fetchData = async (fetchFunction, setData, dataKey) => {\n    try {\n      const result = await fetchFunction(userId);\n      setData(result);\n    } catch (error) {\n      console.error(error);\n      const mockData = {\n        USER_MAIN_DATA,\n        USER_ACTIVITY,\n        USER_AVERAGE_SESSIONS,\n        USER_PERFORMANCE\n      }[dataKey].find((data) => data.userId === userId);\n\n      if (!mockData) {\n        navigate('/error');\n      } else {\n        setData({ data: mockData });\n      }\n    }\n  };\n\n  // Effect for fetching user data\n  useEffect(() => {\n    fetchData(getUserById, setUser, 'USER_MAIN_DATA');\n  }, [userId]);\n\n  // Effect for fetching user activity\n  useEffect(() => {\n    fetchData(getUserActivityById, setActivity, 'USER_ACTIVITY');\n  }, [userId]);\n\n  // Effect for fetching user average sessions\n  useEffect(() => {\n    fetchData(getUserAverageSessionsById, setAverageSessions, 'USER_AVERAGE_SESSIONS');\n  }, [userId]);\n\n  // Effect for fetching user performance\n  useEffect(() => {\n    fetchData(getUserPerformanceById, setPerformance, 'USER_PERFORMANCE');\n  }, [userId]);\n\n  // Prepare the data to be returned for component usage\n  const userData = user?.data;\n  const activityData = activity?.data;\n  const averageSessionsData = averageSessions?.data;\n  const performanceData = performance?.data;\n\n  return {\n    userData,\n    activityData,\n    averageSessionsData,\n    performanceData,\n  };\n};\n\nexport default useFetchingData;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,WAAW,EACXC,mBAAmB,EACnBC,0BAA0B,EAC1BC,sBAAsB,QACjB,OAAO,CAAC,CAAC;;AAEhB;AACA,SAASC,cAAc,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,gBAAgB,QAAQ,YAAY;AAEnG,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAMuB,SAAS,GAAG,MAAAA,CAAOC,aAAa,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC3D,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMH,aAAa,CAACZ,MAAM,CAAC;MAC1Ca,OAAO,CAACE,MAAM,CAAC;IACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,MAAME,QAAQ,GAAG;QACfvB,cAAc;QACdC,aAAa;QACbC,qBAAqB;QACrBC;MACF,CAAC,CAACgB,OAAO,CAAC,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACpB,MAAM,KAAKA,MAAM,CAAC;MAEjD,IAAI,CAACkB,QAAQ,EAAE;QACbhB,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,MAAM;QACLW,OAAO,CAAC;UAAEO,IAAI,EAAEF;QAAS,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA7B,SAAS,CAAC,MAAM;IACdsB,SAAS,CAACpB,WAAW,EAAEa,OAAO,EAAE,gBAAgB,CAAC;EACnD,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;;EAEZ;EACAX,SAAS,CAAC,MAAM;IACdsB,SAAS,CAACnB,mBAAmB,EAAEc,WAAW,EAAE,eAAe,CAAC;EAC9D,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;;EAEZ;EACAX,SAAS,CAAC,MAAM;IACdsB,SAAS,CAAClB,0BAA0B,EAAEe,kBAAkB,EAAE,uBAAuB,CAAC;EACpF,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;;EAEZ;EACAX,SAAS,CAAC,MAAM;IACdsB,SAAS,CAACjB,sBAAsB,EAAEgB,cAAc,EAAE,kBAAkB,CAAC;EACvE,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMqB,QAAQ,GAAGlB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,IAAI;EAC3B,MAAME,YAAY,GAAGjB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEe,IAAI;EACnC,MAAMG,mBAAmB,GAAGhB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEa,IAAI;EACjD,MAAMI,eAAe,GAAGf,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEW,IAAI;EAEzC,OAAO;IACLC,QAAQ;IACRC,YAAY;IACZC,mBAAmB;IACnBC;EACF,CAAC;AACH,CAAC;AAACvB,EAAA,CA/DIF,eAAe;EAAA,QACFT,WAAW;AAAA;AAgE9B,eAAeS,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}