{"ast":null,"code":"import { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../file/data.js';\nimport { UserMainData, UserActivity, UserAverageSessions, UserPerformance } from '../services/dataModel';\n\n//function to get the user's name\nexport const getUserFirstNameById = id => {\n  const user = USER_MAIN_DATA.find(user => user.id === id);\n  return user ? new UserMainData(user).getFirstName() : 'User not found';\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    // Fetch data from API\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      return new UserMainData(data);\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = userId => {\n  const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n  return userActivity ? new UserActivity(userActivity) : null;\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = userId => {\n  const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n  return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = userId => {\n  const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n  return userPerformance ? new UserPerformance(userPerformance) : null;\n};\n\n//checker les variables d'environement pour chaque fonction pour pouvoir récupérer soit l'API soit les données mockées\n// + créer une class de modélisation pour l'API (une classe pour chaque donnée)\n//formatage de données à faire directement dans la classe de modélisatione et non dans les composants !\n\n//fichier.env\n\n//ne pas oublier de basculer la récupération des datas en mockées en promesse (comme ça je n'aurai pas à tout changer)","map":{"version":3,"names":["USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","UserMainData","UserActivity","UserAverageSessions","UserPerformance","getUserFirstNameById","id","user","find","getFirstName","getUserMainDataById","process","env","REACT_APP_USE_MOCKED_DATA","response","fetch","ok","Error","statusText","data","json","error","console","getUserActivityById","userId","userActivity","activity","getUserAverageSessionsById","userAverageSession","session","getUserPerformanceById","userPerformance","performance"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import {\n  USER_MAIN_DATA,\n  USER_ACTIVITY,\n  USER_AVERAGE_SESSIONS,\n  USER_PERFORMANCE,\n} from '../file/data.js'\n\nimport {  \n        UserMainData, \n        UserActivity, \n        UserAverageSessions, \n        UserPerformance \n} from '../services/dataModel';\n\n//function to get the user's name\nexport const getUserFirstNameById = (id) => {\n  const user = USER_MAIN_DATA.find(user => user.id === id);\n  return user ? new UserMainData(user).getFirstName() : 'User not found';\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n      // Use mocked data\n      const user = USER_MAIN_DATA.find(user => user.id === id);\n      return user ? new UserMainData(user) : null;\n  } else {\n      // Fetch data from API\n      try {\n          const response = await fetch(`http://localhost:3000/user/${id}`);\n          if (!response.ok) {\n              throw new Error('Network response was not ok' + response.statusText);\n          }\n          const data = await response.json();\n          return new UserMainData(data);\n      } catch (error) {\n          console.error('Fetch error: ', error);\n          throw error;\n      }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = (userId) => {\n  const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n  return userActivity ? new UserActivity(userActivity) : null;\n};\n\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = (userId) => {\n  const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n  return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = (userId) => {\n  const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n  return userPerformance ? new UserPerformance(userPerformance) : null;\n};\n\n\n  //checker les variables d'environement pour chaque fonction pour pouvoir récupérer soit l'API soit les données mockées\n  // + créer une class de modélisation pour l'API (une classe pour chaque donnée)\n  //formatage de données à faire directement dans la classe de modélisatione et non dans les composants !\n\n//fichier.env\n\n//ne pas oublier de basculer la récupération des datas en mockées en promesse (comme ça je n'aurai pas à tout changer)"],"mappings":"AAAA,SACEA,cAAc,EACdC,aAAa,EACbC,qBAAqB,EACrBC,gBAAgB,QACX,iBAAiB;AAExB,SACQC,YAAY,EACZC,YAAY,EACZC,mBAAmB,EACnBC,eAAe,QAChB,uBAAuB;;AAE9B;AACA,OAAO,MAAMC,oBAAoB,GAAIC,EAAE,IAAK;EAC1C,MAAMC,IAAI,GAAGV,cAAc,CAACW,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKA,EAAE,CAAC;EACxD,OAAOC,IAAI,GAAG,IAAIN,YAAY,CAACM,IAAI,CAAC,CAACE,YAAY,CAAC,CAAC,GAAG,gBAAgB;AACxE,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOJ,EAAE,IAAK;EAC/C,IAAIK,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IAClD;IACA,MAAMN,IAAI,GAAGV,cAAc,CAACW,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKA,EAAE,CAAC;IACxD,OAAOC,IAAI,GAAG,IAAIN,YAAY,CAACM,IAAI,CAAC,GAAG,IAAI;EAC/C,CAAC,MAAM;IACH;IACA,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BT,EAAG,EAAC,CAAC;MAChE,IAAI,CAACQ,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGH,QAAQ,CAACI,UAAU,CAAC;MACxE;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClC,OAAO,IAAInB,YAAY,CAACkB,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACf;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAIC,MAAM,IAAK;EAC7C,MAAMC,YAAY,GAAG3B,aAAa,CAACU,IAAI,CAACkB,QAAQ,IAAIA,QAAQ,CAACF,MAAM,KAAKA,MAAM,CAAC;EAC/E,OAAOC,YAAY,GAAG,IAAIvB,YAAY,CAACuB,YAAY,CAAC,GAAG,IAAI;AAC7D,CAAC;;AAGD;AACA,OAAO,MAAME,0BAA0B,GAAIH,MAAM,IAAK;EACpD,MAAMI,kBAAkB,GAAG7B,qBAAqB,CAACS,IAAI,CAACqB,OAAO,IAAIA,OAAO,CAACL,MAAM,KAAKA,MAAM,CAAC;EAC3F,OAAOI,kBAAkB,GAAG,IAAIzB,mBAAmB,CAACyB,kBAAkB,CAAC,GAAG,IAAI;AAChF,CAAC;;AAED;AACA,OAAO,MAAME,sBAAsB,GAAIN,MAAM,IAAK;EAChD,MAAMO,eAAe,GAAG/B,gBAAgB,CAACQ,IAAI,CAACwB,WAAW,IAAIA,WAAW,CAACR,MAAM,KAAKA,MAAM,CAAC;EAC3F,OAAOO,eAAe,GAAG,IAAI3B,eAAe,CAAC2B,eAAe,CAAC,GAAG,IAAI;AACtE,CAAC;;AAGC;AACA;AACA;;AAEF;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}