{"ast":null,"code":"import { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../file/data.js';\nimport { UserMainData, UserActivity, UserAverageSessions, UserPerformance } from '../services/dataModel';\n\n// Function to get the user's first name\nexport const getUserFirstNameById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      console.log(response);\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'userInfos' in data) {\n        const user = new UserMainData(data);\n        return user.getFirstName();\n      } else {\n        console.error('Unexpected API response format');\n        return 'User not found'; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'userInfos' in data) {\n        return new UserMainData(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      if (apiResponse && 'data' in apiResponse && 'sessions' in apiResponse.data) {\n        const {\n          sessions\n        } = apiResponse.data;\n        if (Array.isArray(sessions)) {\n          return new UserActivity({\n            userId,\n            sessions\n          });\n        } else {\n          console.error('Unexpected format for sessions');\n          return null; // or handle the error as needed\n        }\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'sessions' in data) {\n        return new UserAverageSessions(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n    return userPerformance ? new UserPerformance(userPerformance) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'kind' in data && 'data' in data) {\n        return new UserPerformance(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","UserMainData","UserActivity","UserAverageSessions","UserPerformance","getUserFirstNameById","id","process","env","REACT_APP_USE_MOCKED_DATA","user","find","getFirstName","response","fetch","console","log","ok","Error","statusText","data","json","error","getUserMainDataById","getUserActivityById","userId","userActivity","activity","apiResponse","sessions","Array","isArray","getUserAverageSessionsById","userAverageSession","session","getUserPerformanceById","userPerformance","performance"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import {\n  USER_MAIN_DATA,\n  USER_ACTIVITY,\n  USER_AVERAGE_SESSIONS,\n  USER_PERFORMANCE,\n} from '../file/data.js'\n\nimport {  \n        UserMainData, \n        UserActivity, \n        UserAverageSessions, \n        UserPerformance \n} from '../services/dataModel';\n\n// Function to get the user's first name\nexport const getUserFirstNameById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      console.log(response)\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'userInfos' in data) {\n        const user = new UserMainData(data);\n        return user.getFirstName();\n      } else {\n        console.error('Unexpected API response format');\n        return 'User not found'; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'userInfos' in data) {\n        return new UserMainData(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      if (apiResponse && 'data' in apiResponse && 'sessions' in apiResponse.data) {\n        const { sessions } = apiResponse.data;\n        if (Array.isArray(sessions)) {\n          return new UserActivity({ userId, sessions });\n        } else {\n          console.error('Unexpected format for sessions');\n          return null; // or handle the error as needed\n        }\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'sessions' in data) {\n        return new UserAverageSessions(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n    return userPerformance ? new UserPerformance(userPerformance) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      if (data && 'kind' in data && 'data' in data) {\n        return new UserPerformance(data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"AAAA,SACEA,cAAc,EACdC,aAAa,EACbC,qBAAqB,EACrBC,gBAAgB,QACX,iBAAiB;AAExB,SACQC,YAAY,EACZC,YAAY,EACZC,mBAAmB,EACnBC,eAAe,QAChB,uBAAuB;;AAE9B;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,EAAE,IAAK;EAChD,IAAIC,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD,MAAMC,IAAI,GAAGb,cAAc,CAACc,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC;IACxD,OAAOI,IAAI,GAAG,IAAIT,YAAY,CAACS,IAAI,CAAC,CAACE,YAAY,CAAC,CAAC,GAAG,gBAAgB;EACxE,CAAC,MAAM;IACL,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BR,EAAG,EAAC,CAAC;MAChES,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,GAAGL,QAAQ,CAACM,UAAU,CAAC;MAChF;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,IAAI,WAAW,IAAIA,IAAI,EAAE;QAC/B,MAAMV,IAAI,GAAG,IAAIT,YAAY,CAACmB,IAAI,CAAC;QACnC,OAAOV,IAAI,CAACE,YAAY,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLG,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;QAC/C,OAAO,gBAAgB,CAAC,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOjB,EAAE,IAAK;EAC/C,IAAIC,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD,MAAMC,IAAI,GAAGb,cAAc,CAACc,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC;IACxD,OAAOI,IAAI,GAAG,IAAIT,YAAY,CAACS,IAAI,CAAC,GAAG,IAAI;EAC7C,CAAC,MAAM;IACL,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BR,EAAG,EAAC,CAAC;MAChE,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGL,QAAQ,CAACM,UAAU,CAAC;MACtE;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,IAAI,WAAW,IAAIA,IAAI,EAAE;QAC/B,OAAO,IAAInB,YAAY,CAACmB,IAAI,CAAC;MAC/B,CAAC,MAAM;QACLL,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;QAC/C,OAAO,IAAI,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAOC,MAAM,IAAK;EACnD,IAAIlB,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD,MAAMiB,YAAY,GAAG5B,aAAa,CAACa,IAAI,CAACgB,QAAQ,IAAIA,QAAQ,CAACF,MAAM,KAAKA,MAAM,CAAC;IAC/E,OAAOC,YAAY,GAAG,IAAIxB,YAAY,CAACwB,YAAY,CAAC,GAAG,IAAI;EAC7D,CAAC,MAAM;IACL,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BW,MAAO,WAAU,CAAC;MAC7E,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,GAAGL,QAAQ,CAACM,UAAU,CAAC;MACtE;MACA,MAAMS,WAAW,GAAG,MAAMf,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACzC,IAAIO,WAAW,IAAI,MAAM,IAAIA,WAAW,IAAI,UAAU,IAAIA,WAAW,CAACR,IAAI,EAAE;QAC1E,MAAM;UAAES;QAAS,CAAC,GAAGD,WAAW,CAACR,IAAI;QACrC,IAAIU,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UAC3B,OAAO,IAAI3B,YAAY,CAAC;YAAEuB,MAAM;YAAEI;UAAS,CAAC,CAAC;QAC/C,CAAC,MAAM;UACLd,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;UAC/C,OAAO,IAAI,CAAC,CAAC;QACf;MACF,CAAC,MAAM;QACLP,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;QAC/C,OAAO,IAAI,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,0BAA0B,GAAG,MAAOP,MAAM,IAAK;EAC1D,IAAIlB,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD,MAAMwB,kBAAkB,GAAGlC,qBAAqB,CAACY,IAAI,CAACuB,OAAO,IAAIA,OAAO,CAACT,MAAM,KAAKA,MAAM,CAAC;IAC3F,OAAOQ,kBAAkB,GAAG,IAAI9B,mBAAmB,CAAC8B,kBAAkB,CAAC,GAAG,IAAI;EAChF,CAAC,MAAM;IACL,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BW,MAAO,mBAAkB,CAAC;MACrF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGL,QAAQ,CAACM,UAAU,CAAC;MACxE;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,IAAI,UAAU,IAAIA,IAAI,EAAE;QAC9B,OAAO,IAAIjB,mBAAmB,CAACiB,IAAI,CAAC;MACtC,CAAC,MAAM;QACLL,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;QAC/C,OAAO,IAAI,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,sBAAsB,GAAG,MAAOV,MAAM,IAAK;EACtD,IAAIlB,OAAO,CAACC,GAAG,CAACC,yBAAyB,KAAK,MAAM,EAAE;IACpD,MAAM2B,eAAe,GAAGpC,gBAAgB,CAACW,IAAI,CAAC0B,WAAW,IAAIA,WAAW,CAACZ,MAAM,KAAKA,MAAM,CAAC;IAC3F,OAAOW,eAAe,GAAG,IAAIhC,eAAe,CAACgC,eAAe,CAAC,GAAG,IAAI;EACtE,CAAC,MAAM;IACL,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAA6BW,MAAO,cAAa,CAAC;MAChF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGL,QAAQ,CAACM,UAAU,CAAC;MACxE;MACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,IAAI,MAAM,IAAIA,IAAI,IAAI,MAAM,IAAIA,IAAI,EAAE;QAC5C,OAAO,IAAIhB,eAAe,CAACgB,IAAI,CAAC;MAClC,CAAC,MAAM;QACLL,OAAO,CAACO,KAAK,CAAC,gCAAgC,CAAC;QAC/C,OAAO,IAAI,CAAC,CAAC;MACf;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}