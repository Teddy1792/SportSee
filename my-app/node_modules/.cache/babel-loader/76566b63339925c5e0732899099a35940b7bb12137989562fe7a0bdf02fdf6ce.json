{"ast":null,"code":"import { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../file/data.js';\nimport { UserMainData, UserActivity, UserAverageSessions, UserPerformance } from '../services/dataModel';\n\n// Function to get the user's first name\nexport const getUserFirstNameById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Adjust this check to look for 'data' and then 'userInfos' within 'data'\n      if (data && 'data' in data && 'userInfos' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserMainData\n        const user = new UserMainData(data.data);\n        return user.getFirstName();\n      } else {\n        console.error('Unexpected API response format:', data);\n        return 'User not found'; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      // Check for 'data' and then 'userInfos' within 'data'\n      if (data && 'data' in data && 'userInfos' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserMainData\n        return new UserMainData(data.data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    console.log(\"in service layer, type of:\", typeof userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      if (apiResponse && 'data' in apiResponse && 'sessions' in apiResponse.data) {\n        const {\n          sessions\n        } = apiResponse.data;\n        if (Array.isArray(sessions)) {\n          return new UserActivity({\n            userId,\n            sessions\n          });\n        } else {\n          console.error('Unexpected format for sessions');\n          return null; // or handle the error as needed\n        }\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Adjust this check to look for 'data' and then 'sessions' within 'data'\n      if (data && 'data' in data && 'sessions' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserAverageSessions\n        return new UserAverageSessions(data.data);\n      } else {\n        console.error('Unexpected API response format :', data);\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n    return userPerformance ? new UserPerformance(userPerformance) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Check for 'data' and then 'kind' and 'data' within 'data'\n      if (data && 'data' in data && 'kind' in data.data && 'data' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserPerformance\n        return new UserPerformance(data.data);\n      } else {\n        console.error('Unexpected API response format:', data);\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","UserMainData","UserActivity","UserAverageSessions","UserPerformance","getUserFirstNameById","id","process","env","REACT_APP_USE_MOCKED_DATA","user","find","getFirstName","response","fetch","ok","Error","statusText","data","json","console","error","getUserMainDataById","getUserActivityById","userId","userActivity","activity","log","apiResponse","sessions","Array","isArray","getUserAverageSessionsById","userAverageSession","session","getUserPerformanceById","userPerformance","performance"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import {\n  USER_MAIN_DATA,\n  USER_ACTIVITY,\n  USER_AVERAGE_SESSIONS,\n  USER_PERFORMANCE,\n} from '../file/data.js'\n\nimport {  \n        UserMainData, \n        UserActivity, \n        UserAverageSessions, \n        UserPerformance \n} from '../services/dataModel';\n\n// Function to get the user's first name\nexport const getUserFirstNameById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Adjust this check to look for 'data' and then 'userInfos' within 'data'\n      if (data && 'data' in data && 'userInfos' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserMainData\n        const user = new UserMainData(data.data);\n        return user.getFirstName();\n      } else {\n        console.error('Unexpected API response format:', data);\n        return 'User not found'; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      // Check for 'data' and then 'userInfos' within 'data'\n      if (data && 'data' in data && 'userInfos' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserMainData\n        return new UserMainData(data.data);\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    console.log(\"in service layer, type of:\",typeof userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      if (apiResponse && 'data' in apiResponse && 'sessions' in apiResponse.data) {\n        const { sessions } = apiResponse.data;\n        if (Array.isArray(sessions)) {\n          return new UserActivity({ userId, sessions });\n        } else {\n          console.error('Unexpected format for sessions');\n          return null; // or handle the error as needed\n        }\n      } else {\n        console.error('Unexpected API response format');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Adjust this check to look for 'data' and then 'sessions' within 'data'\n      if (data && 'data' in data && 'sessions' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserAverageSessions\n        return new UserAverageSessions(data.data);\n      } else {\n        console.error('Unexpected API response format :', data);\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n    return userPerformance ? new UserPerformance(userPerformance) : null;\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const data = await response.json();\n      // Check for 'data' and then 'kind' and 'data' within 'data'\n      if (data && 'data' in data && 'kind' in data.data && 'data' in data.data) {\n        // If the structure is correct, pass the 'data' property to UserPerformance\n        return new UserPerformance(data.data);\n      } else {\n        console.error('Unexpected API response format:', data);\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}