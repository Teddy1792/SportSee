{"ast":null,"code":"import { USER_MAIN_DATA, USER_ACTIVITY, USER_AVERAGE_SESSIONS, USER_PERFORMANCE } from '../file/data.js';\nimport { UserMainData, UserActivity, UserAverageSessions, UserPerformance } from '../services/dataModel';\n\n//function to get the user's name\nexport const getUserFirstNameById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      const user = new UserMainData(data);\n      return user.getFirstName();\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async id => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user) : null;\n  } else {\n    // Fetch data from API\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok' + response.statusText);\n      }\n      const data = await response.json();\n      return new UserMainData(data);\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    // Fetch data from API\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      // Assuming the API response has a 'data' property\n      if ('data' in apiResponse) {\n        // Access the nested data within the 'data' object\n        const userActivityData = apiResponse.data; // Adjust this depending on the actual structure of your user activity data\n\n        // Validate the necessary data before creating a new UserActivity instance\n        if (userActivityData) {\n          // You might need to check specific properties of userActivityData depending on your needs\n          return new UserActivity(userActivityData); // Pass the correct data to your model\n        } else {\n          console.error('Required user activity data is missing in the response');\n          return null;\n        }\n      } else {\n        // Handle the case where the 'data' property is missing\n        console.error('Unexpected API response format: \"data\" property is missing');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n    return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n  }\n  try {\n    const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok: ' + response.statusText);\n    }\n    const data = await response.json();\n    return new UserAverageSessions(data);\n  } catch (error) {\n    console.error('Fetch error: ', error);\n    throw error;\n  }\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async userId => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n    return userPerformance ? new UserPerformance(userPerformance) : null;\n  }\n  try {\n    const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok: ' + response.statusText);\n    }\n    const data = await response.json();\n    return new UserPerformance(data);\n  } catch (error) {\n    console.error('Fetch error: ', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["USER_MAIN_DATA","USER_ACTIVITY","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","UserMainData","UserActivity","UserAverageSessions","UserPerformance","getUserFirstNameById","id","process","env","REACT_APP_USE_MOCKED_DATA","user","find","getFirstName","response","fetch","ok","Error","statusText","data","json","error","console","getUserMainDataById","getUserActivityById","userId","userActivity","activity","apiResponse","userActivityData","getUserAverageSessionsById","userAverageSession","session","getUserPerformanceById","userPerformance","performance"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import {\n  USER_MAIN_DATA,\n  USER_ACTIVITY,\n  USER_AVERAGE_SESSIONS,\n  USER_PERFORMANCE,\n} from '../file/data.js'\n\nimport {  \n        UserMainData, \n        UserActivity, \n        UserAverageSessions, \n        UserPerformance \n} from '../services/dataModel';\n\n//function to get the user's name\nexport const getUserFirstNameById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    const user = USER_MAIN_DATA.find(user => user.id === id);\n    return user ? new UserMainData(user).getFirstName() : 'User not found';\n  } else {\n    try {\n      const response = await fetch(`http://localhost:3000/user/${id}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok. Status: ' + response.statusText);\n      }\n      const data = await response.json();\n      const user = new UserMainData(data);\n      return user.getFirstName(); \n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n\n// Function to get the main data by user ID\nexport const getUserMainDataById = async (id) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n      // Use mocked data\n      const user = USER_MAIN_DATA.find(user => user.id === id);\n      return user ? new UserMainData(user) : null;\n  } else {\n      // Fetch data from API\n      try {\n          const response = await fetch(`http://localhost:3000/user/${id}`);\n          if (!response.ok) {\n              throw new Error('Network response was not ok' + response.statusText);\n          }\n          const data = await response.json();\n          return new UserMainData(data);\n      } catch (error) {\n          console.error('Fetch error: ', error);\n          throw error;\n      }\n  }\n};\n\n// Function to get the activity data by user ID\nexport const getUserActivityById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const userActivity = USER_ACTIVITY.find(activity => activity.userId === userId);\n    return userActivity ? new UserActivity(userActivity) : null;\n  } else {\n    // Fetch data from API\n    try {\n      const response = await fetch(`http://localhost:3000/user/${userId}/activity`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok: ' + response.statusText);\n      }\n      const apiResponse = await response.json();\n      // Assuming the API response has a 'data' property\n      if ('data' in apiResponse) {\n        // Access the nested data within the 'data' object\n        const userActivityData = apiResponse.data; // Adjust this depending on the actual structure of your user activity data\n\n        // Validate the necessary data before creating a new UserActivity instance\n        if (userActivityData) { // You might need to check specific properties of userActivityData depending on your needs\n          return new UserActivity(userActivityData); // Pass the correct data to your model\n        } else {\n          console.error('Required user activity data is missing in the response');\n          return null;\n        }\n      } else {\n        // Handle the case where the 'data' property is missing\n        console.error('Unexpected API response format: \"data\" property is missing');\n        return null; // or handle the error as needed\n      }\n    } catch (error) {\n      console.error('Fetch error: ', error);\n      throw error;\n    }\n  }\n};\n\n\n\n\n\n// Function to get the average session data by user ID\nexport const getUserAverageSessionsById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n  const userAverageSession = USER_AVERAGE_SESSIONS.find(session => session.userId === userId);\n  return userAverageSession ? new UserAverageSessions(userAverageSession) : null;\n}\ntry {\n  const response = await fetch(`http://localhost:3000/user/${userId}/average-sessions`);\n  if (!response.ok) {\n    throw new Error('Network response was not ok: ' + response.statusText);\n  }\n  const data = await response.json();\n  return new UserAverageSessions(data);\n} catch (error) {\n  console.error('Fetch error: ', error);\n  throw error;\n}\n};\n\n// Function to get the performance data by user ID\nexport const getUserPerformanceById = async (userId) => {\n  if (process.env.REACT_APP_USE_MOCKED_DATA === 'true') {\n    // Use mocked data\n    const userPerformance = USER_PERFORMANCE.find(performance => performance.userId === userId);\n  return userPerformance ? new UserPerformance(userPerformance) : null;\n  }\n  try {\n    const response = await fetch(`http://localhost:3000/user/${userId}/performance`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok: ' + response.statusText);\n    }\n    const data = await response.json();\n    return new UserPerformance(data);\n  } catch (error) {\n    console.error('Fetch error: ', error);\n    throw error;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}