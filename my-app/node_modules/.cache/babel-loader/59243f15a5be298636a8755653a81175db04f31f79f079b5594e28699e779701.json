{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUserMainDataById, getUserActivityById, getUserAverageSessionsById,\n// if available\ngetUserPerformanceById // if available\n} from './dataService'; // Adjust this path if your dataService file is located elsewhere\n\nfunction useDataService(userId) {\n  _s();\n  const navigate = useNavigate();\n\n  // State variables for different data types\n  const [user, setUser] = useState(null);\n  const [activity, setActivity] = useState(null);\n  const [averageSessions, setAverageSessions] = useState(null); // if available\n  const [performance, setPerformance] = useState(null); // if available\n\n  useEffect(() => {\n    // This is an async function that fetches all required data\n    const fetchData = async () => {\n      try {\n        // The Promise.all function allows the program to wait for all promises to resolve\n        const results = await Promise.all([getUserMainDataById(userId), getUserActivityById(userId), getUserAverageSessionsById(userId),\n        // if available\n        getUserPerformanceById(userId) // if available\n        ]);\n\n        // Destructuring the array of results and setting the state for each type of data\n        const [userData, activityData, averageSessionsData, performanceData] = results;\n        setUser(userData);\n        setActivity(activityData);\n        setAverageSessions(averageSessionsData); // if available\n        setPerformance(performanceData); // if available\n      } catch (error) {\n        // Basic error logging and redirection to an error page\n        console.error(\"An error occurred while fetching data:\", error);\n        navigate(\"/error\");\n      }\n    };\n\n    // Invoke the async fetchData function\n    fetchData();\n  }, [userId, navigate]); // Dependency array to ensure useEffect is run whenever userId changes\n\n  // The hook returns an object containing all the relevant data\n  return {\n    user,\n    activity,\n    averageSessions,\n    // if available\n    performance // if available\n  };\n}\n_s(useDataService, \"mRX32nB+Uw8/Lxa2C5aQdtDGHe0=\", false, function () {\n  return [useNavigate];\n});\nexport default useDataService;","map":{"version":3,"names":["useState","useEffect","useNavigate","getUserMainDataById","getUserActivityById","getUserAverageSessionsById","getUserPerformanceById","useDataService","userId","_s","navigate","user","setUser","activity","setActivity","averageSessions","setAverageSessions","performance","setPerformance","fetchData","results","Promise","all","userData","activityData","averageSessionsData","performanceData","error","console"],"sources":["/Users/theodoreabitbol/Desktop/OpenClassrooms/Projet 12/my-app/src/services/dataService.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { \n  getUserMainDataById, \n  getUserActivityById, \n  getUserAverageSessionsById, // if available\n  getUserPerformanceById, // if available\n} from './dataService'; // Adjust this path if your dataService file is located elsewhere\n\nfunction useDataService(userId) {\n  const navigate = useNavigate();\n  \n  // State variables for different data types\n  const [user, setUser] = useState(null);\n  const [activity, setActivity] = useState(null);\n  const [averageSessions, setAverageSessions] = useState(null); // if available\n  const [performance, setPerformance] = useState(null); // if available\n\n  useEffect(() => {\n    // This is an async function that fetches all required data\n    const fetchData = async () => {\n      try {\n        // The Promise.all function allows the program to wait for all promises to resolve\n        const results = await Promise.all([\n          getUserMainDataById(userId),\n          getUserActivityById(userId),\n          getUserAverageSessionsById(userId), // if available\n          getUserPerformanceById(userId), // if available\n        ]);\n\n        // Destructuring the array of results and setting the state for each type of data\n        const [userData, activityData, averageSessionsData, performanceData] = results;\n        setUser(userData);\n        setActivity(activityData);\n        setAverageSessions(averageSessionsData); // if available\n        setPerformance(performanceData); // if available\n      } catch (error) {\n        // Basic error logging and redirection to an error page\n        console.error(\"An error occurred while fetching data:\", error);\n        navigate(\"/error\");\n      }\n    };\n\n    // Invoke the async fetchData function\n    fetchData();\n  }, [userId, navigate]); // Dependency array to ensure useEffect is run whenever userId changes\n\n  // The hook returns an object containing all the relevant data\n  return {\n    user,\n    activity,\n    averageSessions, // if available\n    performance, // if available\n  };\n}\n\nexport default useDataService;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACEC,mBAAmB,EACnBC,mBAAmB,EACnBC,0BAA0B;AAAE;AAC5BC,sBAAsB,CAAE;AAAA,OACnB,eAAe,CAAC,CAAC;;AAExB,SAASC,cAAcA,CAACC,MAAM,EAAE;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChCnB,mBAAmB,CAACK,MAAM,CAAC,EAC3BJ,mBAAmB,CAACI,MAAM,CAAC,EAC3BH,0BAA0B,CAACG,MAAM,CAAC;QAAE;QACpCF,sBAAsB,CAACE,MAAM,CAAC,CAAE;QAAA,CACjC,CAAC;;QAEF;QACA,MAAM,CAACe,QAAQ,EAAEC,YAAY,EAAEC,mBAAmB,EAAEC,eAAe,CAAC,GAAGN,OAAO;QAC9ER,OAAO,CAACW,QAAQ,CAAC;QACjBT,WAAW,CAACU,YAAY,CAAC;QACzBR,kBAAkB,CAACS,mBAAmB,CAAC,CAAC,CAAC;QACzCP,cAAc,CAACQ,eAAe,CAAC,CAAC,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DjB,QAAQ,CAAC,QAAQ,CAAC;MACpB;IACF,CAAC;;IAED;IACAS,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACX,MAAM,EAAEE,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExB;EACA,OAAO;IACLC,IAAI;IACJE,QAAQ;IACRE,eAAe;IAAE;IACjBE,WAAW,CAAE;EACf,CAAC;AACH;AAACR,EAAA,CA7CQF,cAAc;EAAA,QACJL,WAAW;AAAA;AA8C9B,eAAeK,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}